// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
	"web3_pay_backend/config"
	"web3_pay_backend/handlers"
	"web3_pay_backend/repository"
	"web3_pay_backend/router"
	"web3_pay_backend/services"
	"web3_pay_backend/tools"
)

// Injectors from wire.go:

func InitailizeApp() *gin.Engine {
	db := config.NewDB()
	client := config.NewRedis()
	logger := config.NewLog()
	repositoryRepository := repository.NewRepository(db, client, logger)
	userRepository := repository.NewUserRepository(repositoryRepository)
	jwt := tools.NewJwt(client)
	sonyID := tools.NewSonyID()
	service := services.NewService(logger, jwt, sonyID)
	userService := services.NewUserService(userRepository, service)
	userHandler := handlers.NewUserHandler(userService)
	engine := router.SetupRouter(userHandler)
	return engine
}

// wire.go:

var repositorySet = wire.NewSet(repository.NewRepository, repository.NewUserRepository)

var toolsSet = wire.NewSet(tools.NewSonyID, tools.NewJwt)

var configSet = wire.NewSet(config.NewDB, config.NewLog, config.NewRedis)

var serviceSet = wire.NewSet(services.NewService, services.NewUserService)

var handlerSet = wire.NewSet(handlers.NewUserHandler)

var routerSet = wire.NewSet(router.SetupRouter)

var SuperSet = wire.NewSet(
	configSet,
	toolsSet,
	routerSet,

	handlerSet,
	serviceSet,
	repositorySet,
)
